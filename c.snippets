####################################################################
#                            C Snippets                            #
####################################################################

priority -50



snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet














snippet /*/ "/*...*/"
/*
 * ${1}
 * ${2} 
 */
${3}
endsnippet

snippet //m "//..."
//modify by ${1:<author>} ${2:<time>}
${3}
//end by $1 $2
${4}
endsnippet

snippet #i< "#include <...>"
#include <${1:/}>
endsnippet

snippet #i" "#include ..."
#include "${1:/}"
endsnippet

#支持直接用shell script，也可以通过!v嵌入vimscript或者!p 嵌入python
snippet #ifn "#ifndef ... endif"
#ifndef _${1:`!v toupper(expand('%:t:r'))`}_h
#define _$1_h
${2}
#endif /* end of include guard: _$1_h */
endsnippet

#支持直接用shell script，也可以通过!v嵌入vimscript或者!p 嵌入python
snippet #ifndef "#ifndef ... endif"
#ifndef _${1:`!v toupper(expand('%:t:r'))`}_h
#define _$1_h
${2}
#endif /* end of include guard: _$1_h */
endsnippet

snippet #if "#if ... #endif"
#if ${1} 
	${2}
#endif
endsnippet

snippet #ie "#if ... #else ... #endif"
#if ${1} 
	${2}
#else
	${3}
#endif
endsnippet

snippet #de "#define ..."
#define ${0}
endsnippet

snippet #d) "#define ...() (...)"
#define ${1}(${2}) (($2)${3})
endsnippet

snippet #define) "#define ...() (...)"
#define ${1}(${2}) (($2)${3})
endsnippet

snippet #dd "#define do {...} while (0)"
#define ${1} do {\
	${2}
} while (0)
endsnippet

snippet #d)d "#define ...() do {...} while (0)"
#define ${1}(${2}) do {\
	${3}
} while (0)
endsnippet

snippet main "main(int argc, char *argv[]) {...}"
int main(int argc, char *argv[])
{
	${0}
	return 0;
}
endsnippet

snippet uc "unsigned char ..." w
unsigned char ${0}
endsnippet

snippet sc "signed char ..." w
signed char ${0}
endsnippet

snippet us "unsigned short ..." w
unsigned short ${0}
endsnippet

snippet ss "signed short ..." w
signed short ${0}
endsnippet

snippet ui "unsigned int ..." w
unsigned int ${0}
endsnippet

snippet si "signed int ..." w
signed int ${0}
endsnippet

snippet ul "unsigned long ..." w
unsigned long ${0}
endsnippet

snippet sl "signed long ..." w
signed long ${0}
endsnippet

snippet pr "printf(...);"
printf("${1}\n"${2});
endsnippet

snippet pri "printf(...);"
printf("${1}\n"${2});
endsnippet

snippet printf "printf(...);"
printf("${1}\n"${2});
endsnippet

snippet printk "printk(...);"
printk(${1:KERN_EMERG} "${2:%}${3}\n"${4});
endsnippet

snippet scanf "scanf(...);"
scanf("%${1}",&${2});
endsnippet

snippet enum "enum ... {...};"
enum ${1} {
	${2}
} ${3};
endsnippet

snippet sizeof "sizeof(...)"
sizeof(${0})
endsnippet

#snippet struct "struct ...;"
#struct ${0};
#endsnippet

snippet struct} "struct ... {...};"
struct ${1}{
	${3}
}${2};
endsnippet

snippet st} "struct ... {...};"
struct ${1}{
	${3}
}${2};
endsnippet

#snippet union "union ...;"
#union ${0};
#endsnippet

snippet un} "union ... {...};"
union ${1}{
	${3}
}${2};
endsnippet

snippet typedef "typedef ...;"
typedef ${0};
endsnippet

snippet ts} "typedef struct ... {...} ...;"
typedef struct {
	${2}
} ${1};
endsnippet

snippet if "if (... ) {...}"
if (${1}) {
	${2}
}
endsnippet

snippet else "else {...}"
else {
	${0}
}
endsnippet

snippet ie "if (...) {...} else {...}"
if (${1}) {
	${2}
} else {
	${3}	
}
endsnippet

snippet ei "else if (...) {...}"
else if (${1}) {
	${2}
}
endsnippet

snippet while "while (...) {...}"
while (${1}) {
	${2}
}
endsnippet

snippet do "do {...} while (...);"
do {
	${1}
} while (${2});
endsnippet

snippet for "for (...) {...}"
for (${1:i} = ${2:0}; $1 < ${3}; ${4:++$1}) {
	${5}
}
endsnippet 

#snippet switch "switch (...) {...}"
#switch (${1}) {
#	case ${2}: 
#		${3}
#	break;
#	case ${4}: 
#		${5}
#	break;
#	case ${6}: 
#		${7}
#	break;
#	default: 
#		${8}
#	break;
#}
#endsnippet

#snippet case "case...break;"
#	case ${1}: 
#		${2}
#	break;
#endsnippet

snippet switch "switch (...) {...}"
switch (${1}) {
case ${2}: 
	${3}
	break;
case ${4}: 
	${5}
	break;
case ${6}: 
	${7}
	break;
default: 
	${8}
	break;
}
endsnippet

snippet case "case...break;"
case ${1}: 
	${2}
	break;
endsnippet

snippet malloc "... =(...)malloc(...);"
	${1} *${2}=(${3} *)malloc(sizeof(${4})*${5});
free($2);
endsnippet

snippet uc} "unsigned char(...) {...}"
unsigned char ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet sc} "signed char(...) {...}"
signed char ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet char} "char(...) {...}"
char ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet us} "unsigned short(...) {...}"
unsigned short ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet short} "short(...) {...}"
short ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet ui} "unsigned int(...) {...}"
unsigned int ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet int} "int(...) {...}"
int ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet ul} "unsigned long(...) {...}"
unsigned long ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet long} "long(...) {...}"
long ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet double} "double(...) {...}"
double ${1}(${2}) 
{
	${3}
	return ${4};
}

${5}
endsnippet

snippet void} "void(...) {...}"
void ${1}(${2}) 
{
	${3}
}

${4}
endsnippet



######################################################################
#                            ASM Snippets                            #
######################################################################
snippet mov ""
	mov ${2},${1}
endsnippet

snippet ldr ""
	ldr ${2},${1:=}
endsnippet

snippet str ""
	str ${1},${2}
endsnippet

snippet __a "__asm__ __volatile__ (...);"
	__asm__ __volatile__ (
	"${1} \n\t"
	:${2}
	:${3}
	:${4}
	);
endsnippet

